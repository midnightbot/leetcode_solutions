##ss
##same as Q 924
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        
        self.removal = {}
        
        #self.print_mat(graph)
        #return -1
        initial = sorted(initial)
        for x in range(len(initial)):
            self.do_bfs(graph,initial[x],initial)
            
        #print(self.removal)
        #print(graph)
        
        mins = float('inf')
        result = -1
        
        for x in self.removal:
            if self.removal[x] < mins:
                mins = self.removal[x]
                result = x
                
        return result
    
    def print_mat(self,mat):
        for x in range(len(mat)):
            print(mat[x])
    def do_bfs(self,graph,node,initial):
        
        par = copy.deepcopy(node)
        for x in range(len(graph[node])):
            graph[node][x] = graph[node][x] *  -1
            
        for y in range(len(graph)):
            if y!=node:
                graph[y][node] = graph[y][node] * -1
        
        #print(graph) 
        q = []
        for x in initial:
            if x!=node:
                q.append(x)
        #print(q)    
        visited = set()
        #size = 0
        
        
        while q:
            #print(q)
            node = q.pop(0)
            
            visited.add(node)
            #size+=1
            for z in range(len(graph[node])):
                if graph[node][z] == 1 and z not in visited:
                    q.append(z)
                    visited.add(z)
                    
            
        
            
        self.removal[par] = len(visited)
        
            
        for x in range(len(graph[par])):
            graph[par][x] = graph[par][x] *  -1
            
        for y in range(len(graph)):
            if y!=par:
                graph[y][par] = graph[y][par] * -1
                
        #print(graph)
